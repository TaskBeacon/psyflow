
def show_ports():
    """
    List all available serial ports with descriptions.
    """
    import serial.tools.list_ports
    ports = list(serial.tools.list_ports.comports())
    if not ports:
        print("No serial ports found.")
    else:
        print("Available serial ports:")
        for i, p in enumerate(ports):
            print(f"[{i}] {p.device} - {p.description}")



import numpy as np
from typing import Any, List, Dict
def generate_balanced_conditions(n_trials, condition_labels, seed=None):
    if seed is not None:
        np.random.seed(seed)
    n_per_cond = n_trials // len(condition_labels)
    extra = n_trials % len(condition_labels)
    conditions = condition_labels * n_per_cond + list(np.random.choice(condition_labels, extra))
    np.random.shuffle(conditions)
    return np.array(conditions)

def assign_stimuli(
    conditions: np.ndarray,
    stim_map: Dict[str, Any],
    components: List[str] = ("cue", "target", "feedback")
) -> np.ndarray:
    """
    Assigns multiple stimuli per condition using a list of stimulus components.

    Parameters:
    - conditions: array of condition labels (e.g., ['win', 'lose', 'neut'])
    - stim_map: dict of available stimuli, typically from stim_bank.get_group("...")
    - components: list of stimulus types (prefixes), e.g., ['cue', 'target']

    Returns:
    - np.ndarray of dicts like {'cue': ..., 'target': ...}
    """
    stim_seq = []
    for cond in conditions:
        stim_bundle = {}
        for comp in components:
            key = f"{comp}_{cond}"
            if key in stim_map:
                stim_bundle[comp] = stim_map[key]
            else:
                raise KeyError(f"Stimulus '{key}' not found in stim_map.")
        stim_seq.append(stim_bundle)

    return np.array(stim_seq, dtype=object)



from pathlib import Path
import yaml
import json

def taps(task_name: str):
    root = Path(task_name).resolve()
    folders = [
        root / "assets",
        root / "config",
        root / "data",
        root / "src",
    ]

    # Create folders
    for folder in folders:
        folder.mkdir(parents=True, exist_ok=True)

    # 1. Template config.yaml
    config_template = {
        "task": {
            "total_blocks": 2,
            "total_trials": 40,
            "conditions": ["win", "lose", "neut"],
            "response_key": "space",
            "key_list": ["space"]
        },
        "timing": {
            "cue_duration": 0.5,
            "anticipation_duration": 0.5,
            "feedback_duration": 1.0,
            "iti_duration": 1.0,
            "initial_target_duration": 0.5,
            "adapt_step": 0.05,
            "min_target_duration": 0.1,
            "max_target_duration": 1.5
        },
        "paths": {
            "stimuli_dir": "./assets",
            "data_dir": "./data"
        }
    }
    with open(root / "config" / "config.yaml", "w", encoding="utf-8") as f:
        yaml.dump(config_template, f, allow_unicode=True)

    # 2. meta.json
    meta = {
        "name": task_name,
        "version": "0.1.0",
        "description": f"{task_name} experiment created by taps()",
        "psyflow_version": "0.3.0",
        "psychopy_version": "2023.2.1",
        "created_by": "you",
        "default_language": "en",
        "entry_point": "main.py"
    }
    with open(root / "meta.json", "w", encoding="utf-8") as f:
        json.dump(meta, f, indent=2)

    # 3. main.py
    main_path = root / "main.py"
    if not main_path.exists():
        main_path.write_text(f"""\
from src.run_trial import run_experiment

if __name__ == "__main__":
    run_experiment()
""")

    # 4. src/run_trial.py
    run_trial_path = root / "src" / "run_trial.py"
    if not run_trial_path.exists():
        run_trial_path.write_text("""\
def run_experiment():
    print("Experiment running... (replace with actual logic)")
""")

    # 5. src/controller.py
    controller_path = root / "src" / "controller.py"
    if not controller_path.exists():
        controller_path.write_text("""\
# Controller logic here
""")

    # 6. README.md
    readme_path = root / "README.md"
    if not readme_path.exists():
        readme_path.write_text(f"# {task_name}\n\nThis is a PsychoPy experiment template generated by `taps()`.\n")

    print(f"âœ… Project '{task_name}' initialized successfully at {root}")
