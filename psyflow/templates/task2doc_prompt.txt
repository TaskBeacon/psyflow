Based on the task_context files, including configuration file (`config/config.yaml`) and task logic files (`main.py`, `run_trial.py`, and, if present, `util.py`), generate a `README.md` for this task.

- **`main.py`** is the entry point: it defines the overall task setup and block-level flow.  
- **`run_trial.py`** defines the trial-level flow.  
- **`util.py`** (if it exists) contains helper functions—e.g. the adaptive controller or other utilities.  
- **`config/config.yaml`** defines all task settings.  

Your goal is to analyze the provided files and generate a `README.md` that ensures full transparency and reproducibility of the task.
Imagine you are a researcher who must reimplement this experiment from scratch using only the information in your README.  
For each section below, include every detail—parameters, timings, flow logic, and configuration values—so that someone can rebuild the task programmatically without referring back to the original code.

**IMPORTANT TABLE FORMATTING RULES (apply to every table in sections 1–4):**  
1. Always start with a header row and a separator row, for example:  
2. After the separator row, include **one blank line** before listing data rows.  
3. Do **not** omit the blank line—this ensures the table closes properly.  
4. Do **not** add extra pipes or indentation.

# Task Name  
Extract the full task name and use it as the document’s top-level heading.

## (Meta Information) we don't need the meta information as header, we just show table  
• Render as a Markdown table with two columns: Field and Value.  
• Include this header and separator row exactly, then a blank line:  
  | Field                | Value                        |  
  |----------------------|------------------------------|  

• Leave the “Value” cells blank. Include rows for:  
  - Name  
  - Version  
  - URL / Repository  
  - Short Description  
  - Created By  
  - Date Created  
  - PsyFlow Version  
  - PsychoPy Version  

## 1. Task Overview  
• One concise paragraph summarizing the goal and design of the task.

## 2. Task Flow  
Split into two subtables—**Block-Level Flow** and **Trial-Level Flow**—plus **Controller Logic** and **other logics** if `util.py` exists.  
• Block-Level Flow comes from `main.py`.  
• Trial-Level Flow comes from `run_trial.py`.  
• Controller Logic comes from `util.py`.  
• any other Logic comes from `util.py`. 

Leave a blank line after each table before continuing.  
Each description must be detailed enough that an LLM could reconstruct the code. Incorporate any timing parameters or stimuli defined in `config.yaml` into the descriptions.

## 3. Configuration Summary  
Note that all settings live in `config/config.yaml`. 
In this section, summarize each subsection in its own table (with header, separator, blank line):

**a. Subject Info** — list each field and its meaning  

**b. Window Settings** — list each parameter and its value  
Example:  
  | Parameter          | Value            |  
  |--------------------|------------------|  
  | size               | [1920, 1080]     |  
  | units              | deg              |  
  | screen             | 1                |  
  | bg_color           | gray             |  
  | fullscreen         | True             |  
  | monitor_width_cm   | 60               |  
  | monitor_distance_cm| 72               |  

**c. Stimuli** — a table with columns: Name, Type, Description  
 
**d. Timing** — a table with columns: Phase, Duration  

**e. Triggers (if exist)** — a table with columns: Event, Code  

**f. Adaptive Controller (if exists)** — a table with columns: Parameter, Value  

## 4. Methods (for academic publication)  
Write this like a Methods section in a paper, with academic tone and clarity.
Prepare two or three paragraphs containing the following:   
- What participants see at each step  
- Any adaptive algorithms or parameters  
- The rationale behind major design choices  
- Detailed task setup and timing information  

**IMPORTANT:** Output **only** the Markdown for the `README.md` file—do not include any additional explanation or commentary.  
